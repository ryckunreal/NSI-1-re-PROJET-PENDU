|—————————————————————————————————————————————————————————————————————————————————————————————————————————|
|       ______  _____  _____  _   _ ___  ___ _____  _   _  _____  ___  _____  _____  _____  _   _         |
|       |  _  \|  _  |/  __ \| | | ||  \/  ||  ___|| \ | ||_   _|/ _ \|_   _||_   _||  _  || \ | |        |
|       | | | || | | || /  \/| | | || .  . || |__  |  \| |  | | / /_\ \ | |    | |  | | | ||  \| |        |
|       | | | || | | || |    | | | || |\/| ||  __| | . ` |  | | |  _  | | |    | |  | | | || . ` |        |
|       | |/ / \ \_/ /| \__/\| |_| || |  | || |___ | |\  |  | | | | | | | |   _| |_ \ \_/ /| |\  |        |
|       |___/   \___/  \____/ \___/ \_|  |_/\____/ \_| \_/  \_/ \_| |_/ \_/   \___/  \___/ \_| \_/        |
|                                                                                                         |
|—————————————————————————————————————————————————————————————————————————————————————————————————————————|
| ______          _      _      ______              _           _   _  _____ _____     __                 |
| | ___ \        (_)    | |     | ___ \            | |         | \ | |/  ___|_   _|   /  |                |
| | |_/ / __ ___  _  ___| |_    | |_/ /__ _ __   __| |_   _    |  \| |\ `--.  | |     `| |  ___ _ __ ___  |
| |  __/ '__/ _ \| |/ _ \ __|   |  __/ _ \ '_ \ / _` | | | |   | . ` | `--. \ | |      | | / _ \ '__/ _ \ |
| | |  | | | (_) | |  __/ |_    | | |  __/ | | | (_| | |_| |   | |\  |/\__/ /_| |_    _| ||  __/ | |  __/ |
| \_|  |_|  \___/| |\___|\__|   \_|  \___|_| |_|\__,_|\__,_|   \_| \_/\____/ \___/    \___/\___|_|  \___| |
|               _/ |                                                                                      |
|              |__/                                                                                       |
|—————————————————————————————————————————————————————————————————————————————————————————————————————————|
|                                                                                                         |
|                                                                                                         |
|   ___      __      _                      _                                                             |
|  / __|_ _ /_/ __ _| |_ ___ _  _ _ _ ___  (_)                                                            |
| | (__| '_/ -_) _` |  _/ -_) || | '_(_-<   _                                                             |
|  \___|_| \___\__,_|\__\___|\_,_|_| /__/  (_)                                                            |
|                                                                                                         |
|        _  _           _      ___                                                                        |
|  ___  | \| |___  __ _| |_   | _ \                                                                       |
| |___| | .` / _ \/ _` | ' \  |   /_                                                                      |
|       |_|\_\___/\__,_|_||_| |_|_(_)                                                                     |
|         ___            _ _ _        ___                                                                 |
|  ___   / __|__ _ _ __ (_) | |___   / _ \                                                                |
| |___| | (__/ _` | '  \| | | / -_) | (_) |                                                               |
|        \___\__,_|_|_|_|_|_|_\___|  \___(_)                                                              |
|       ___              _ _          ___                                                                 |
|  ___ / __|__ _ _ _  __| (_)__ ___  |   \                                                                |
| |___| (__/ _` | ' \/ _` | / _/ -_) | |) |                                                               |
|      \___\__,_|_||_\__,_|_\__\___| |___(_)                                                              |
|                                                                                                         |
|                                                                                                         |
|—————————————————————————————————————————————————————————————————————————————————————————————————————————|


❏ Différentes étapes du projet:

1 ● Créer un jeu du pendu fonctionnel -> console Python uniquement 
    ➤ Assigné à :  Camille & Candice 
                   ● Liens Replit pour accéder aux pendus (jouables dans la console)
                        ➤ [LIEN CACHÉ]  (Camille O.)
                        ➤ [LIEN CACHÉ] (Candice D.)

2 ● Créer un nouveau programme en utlisant PyGame pour créer une interface graphique (réinterprétation du code (de l'étape 1): modifications (ajouts, supressions, etc...) -> mais même principe)
    ➤ Assigné à :  Noah (avec aide de Camille & Candice sur certains points: par exemple -> Camille: difficulté, etc...)
                   ● Liens Replit pour accéder au jeu du pendu (jouable avec interface graphique)
                        ➤ [LIEN CACHÉ] (Noah R.)
                        ➤ [SAUVEGARDE/BACKUP -> compte replit de Camille + disque dur Noah R.]

3 ● Correction des bugs et finilisation du projet (documentation, commentaires etc...)

4 ● Présentation orale du projet (devant toute la classe)
    ➤ Assigné à : Noah & Camille (Candice -> absente [examen du First])

5 ● Publication du dossier sur OneDrive


❏ Le jeu:

● Jeu du pendu classique:
  ➤ Trouvé le mot caché choisi au hasard en essayant des lettres (appuyer sur les touches du clavier)
  ➤ La longueur du mot est visible (traits blancs)
  ➤ Si la lettre rentrée: 
    ➤ est bonne: la lettre remplace le trait correspondant (à sa place dans le mot)
    ➤ est fausse: le pendu se 'dévoile' au fur et à mesure (à chaque erreur)

● Un menu d'accueil:
  ➤ Mieux pour le joueur (agréabilité du service proposé +++)

● Une gestion de la difficulté:
  ➤ Automatisée: le joueur ne choisit pas de difficulté:
    ➤ La difficulté s'adapte en fonction de la longueur du mot:
      ➤ C'est-à-dire que la difficulté sera la même quelque soit le nombre total de lettres dans le mot:
        ➤ Le nombre max d'erreurs est moins grand pour un petit mot, et plus grand pour un mot plus long

● Un jeu monojoueur:
  ➤ 1 seul joueur 

● Une interface graphique [sympathique, accueillante et fonctionnelle]:
  ➤ Un menu d'accueil:
    ➤ Mieux pour le joueur (agréabilité du service proposé +++)
  ➤ Un jeu à thème:
    ➤ Le Western (canyon/désert, sheriff, etc...)
  ➤ Des personnages/items:
    ➤ Le sheriff (explique le but du jeu + réaction lorsque le joueur gagne/perd)
    ➤ Le pendu (qui se dévoile au fur et à mesure, ou pas [si le joueur est FORT])
    ➤ Le sac de pièces (lorsque le joueur gagne):
      ➤ Sentiment de satisfaction pour le joueur
    ➤ Le cercueil (lorsque le joueur perd):
      ➤ Sentiment de frustration pour le joueur (donc: envie de rejouer...)
    ➤ Une flèche qui permet de revenir au menu d'accueil (à la fin de la partie):
      ➤ Mieux pour le joueur (fonctionnalité optimale du jeu +++) 
    ➤ Affiche les lettres déja utilisées
      ➤ Mieux pour le joueur (agréabilité du service proposé +++)
